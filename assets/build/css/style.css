/* - Init -----------------------------------------------> */
/* ------------------------------------------------------> */
/*  HTML5 ? Boilerplate                                    */
/* ------------------------------------------------------> */
html,
body,
div,
span,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
abbr,
address,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
samp,
small,
strong,
sub,
sup,
var,
b,
i,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
ins {
  background-color: #ff9;
  color: #000;
  text-decoration: none;
}
mark {
  background-color: #ff9;
  color: #000;
  font-style: italic;
  font-weight: bold;
}
del {
  text-decoration: line-through;
}
abbr[title],
dfn[title] {
  border-bottom: 1px dotted;
  cursor: help;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}
input,
select {
  vertical-align: middle;
}
body {
  font: 13px/1.231 sans-serif;
  *font-size: small;
}
select,
input,
textarea,
button {
  font: 99% sans-serif;
}
pre,
code,
kbd,
samp {
  font-family: monospace, sans-serif;
}
html {
  overflow-y: scroll;
}
a:hover,
a:active {
  outline: none;
}
ul,
ol {
  margin-left: 2em;
}
ol {
  list-style-type: decimal;
}
nav ul,
nav li {
  margin: 0;
  list-style: none;
  list-style-image: none;
}
small {
  font-size: 85%;
}
strong,
th {
  font-weight: bold;
}
td {
  vertical-align: top;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
  padding: 15px;
}
textarea {
  overflow: auto;
}
.ie6 legend,
.ie7 legend {
  margin-left: -7px;
}
input[type="radio"] {
  vertical-align: text-bottom;
}
input[type="checkbox"] {
  vertical-align: bottom;
}
.ie7 input[type="checkbox"] {
  vertical-align: baseline;
}
.ie6 input {
  vertical-align: text-bottom;
}
label,
input[type="button"],
input[type="submit"],
input[type="image"],
button {
  cursor: pointer;
}
button,
input,
select,
textarea {
  margin: 0;
}
input:invalid,
textarea:invalid {
  border-radius: 1px;
  -moz-box-shadow: 0px 0px 5px red;
  -webkit-box-shadow: 0px 0px 5px red;
  box-shadow: 0px 0px 5px red;
}
.no-boxshadow input:invalid,
.no-boxshadow textarea:invalid {
  background-color: #f0dddd;
}
::-moz-selection {
  background: #FF5E99;
  color: #fff;
  text-shadow: none;
}
::selection {
  background: #FF5E99;
  color: #fff;
  text-shadow: none;
}
a:link {
  -webkit-tap-highlight-color: #FF5E99;
}
button {
  width: auto;
  overflow: visible;
}
.ie7 img {
  -ms-interpolation-mode: bicubic;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: bold;
}
/**
 * Gridpak Beta LESS
 *
 * Generator - http://gridpak.com/
 * Created by @erskinedesign
 */
/* Reusable column setup */
.mixin-col {
  border: 0px solid rgba(0, 0, 0, 0);
  float: left;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  -moz-background-clip: padding-box !important;
  -webkit-background-clip: padding-box !important;
  background-clip: padding-box !important;
  margin-bottom: 5px;
}
.col {
  border: 0px solid rgba(0, 0, 0, 0);
  float: left;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  -moz-background-clip: padding-box !important;
  -webkit-background-clip: padding-box !important;
  background-clip: padding-box !important;
  margin-bottom: 5px;
}
.row.nospace .col {
  padding: 0;
}
.mixin-span_first {
  margin-left: 0;
}
.row.sameh {
  overflow: hidden;
  margin-bottom: 10px;
}
.row.sameh .col {
  margin-bottom: -99999px;
  padding-bottom: 99999px;
}
/* 1. 2 Column Grid 0px - 479px 
    ----------------------------------------------------------------------------- 
    
    Span 1:    49.5%
    Span 2:    100%
    
    ----------------------------------------------------------------------------- */
@media screen and (min-width: 0px) and (max-width: 479px) {
  .col {
    margin-left: 1%;
    padding: 10px;
  }
  /* --- Gridpak variables ---*/
  .col.splitt {
    margin-bottom: 0;
    padding-bottom: 0;
  }
  .col.splitb {
    margin-top: 0;
    padding-top: 0;
  }
  .single,
  .dsingle,
  .tsingle,
  .msingle,
  .quart,
  .dquart,
  .tquart,
  .tiers,
  .dtiers,
  .ttiers,
  .demi,
  .ddemi,
  .tdemi {
    width: 50%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .full,
  .dfull,
  .tfull,
  .mfull {
    width: 100%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
}
/* 2. 4 Column Grid 480px - 779px 
    ----------------------------------------------------------------------------- 
    
    Span 1:    24.625%
    Span 2:    49.75%
    Span 3:    74.875%
    Span 4:    100%
    
    ----------------------------------------------------------------------------- */
@media screen and (min-width: 480px) and (max-width: 779px) {
  .col {
    margin-left: 0.5%;
    padding: 10px;
  }
  /* --- Gridpak variables ---*/
  .row .col:first-child {
    margin-left: 0;
  }
  .single,
  .dsingle,
  .tsingle,
  .quart,
  .dquart,
  .tquart,
  .tiers,
  .dtiers,
  .ttiers {
    width: 25%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .demi,
  .ddemi,
  .tdemi {
    width: 50%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .deuxtiers,
  .ddeuxtiers,
  .tdeuxtiers {
    width: 75%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .full,
  .dfull,
  .tfull {
    width: 100%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
}
/* 3. 8 Column Grid 780px - 959px 
    ----------------------------------------------------------------------------- 
    
    Span 1:    16.4583333333%
    Span 2:    33.1666666667%
    Span 3:    49.875%
    Span 4:    66.5833333333%
    Span 5:    83.2916666667%
    Span 6:    100%
    
    ----------------------------------------------------------------------------- */
@media screen and (min-width: 780px) and (max-width: 959px) {
  .col {
    margin-left: 0.25%;
    padding: 0 5px;
  }
  /* --- Gridpak variables ---*/
  .row .col:first-child {
    margin-left: 0;
  }
  .dsingle,
  .single {
    width: 8.333333333333334%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_2 {
    width: 16.666666666666668%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .quart,
  .dquart {
    width: 25%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .tiers,
  .dtiers {
    width: 33.333333333333336%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_5 {
    width: 41.66666666666667%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .demi,
  .ddemi {
    width: 50%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_7 {
    width: 58.333333333333336%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .deuxtiers,
  .ddeuxtiers {
    width: 66.66666666666667%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_9 {
    width: 75%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_10 {
    width: 83.33333333333334%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_11 {
    width: 91.66666666666667%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .full,
  .dfull {
    width: 100%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
}
/* 4. 12 Column Grid 960px - Infinity 
    ----------------------------------------------------------------------------- 
    
    Span 1:    8.10416666667%
    Span 2:    16.4583333333%
    Span 3:    24.8125%
    Span 4:    33.1666666667%
    Span 5:    41.5208333333%
    Span 6:    49.875%
    Span 7:    58.2291666667%
    Span 8:    66.5833333333%
    Span 9:    74.9375%
    Span 10:    83.2916666667%
    Span 11:    91.6458333333%
    Span 12:    100%
    
    ----------------------------------------------------------------------------- */
@media screen and (min-width: 960px) {
  .col {
    margin-left: 0.25%;
    padding: 0 5px;
  }
  /* --- Gridpak variables ---*/
  .row .col:first-child {
    margin-left: 0;
  }
  .single {
    width: 8.333333333333334%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_2 {
    width: 16.666666666666668%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .quart {
    width: 25%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .tiers {
    width: 33.333333333333336%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_5 {
    width: 41.66666666666667%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .demi {
    width: 50%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_7 {
    width: 58.333333333333336%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .deuxtiers {
    width: 66.66666666666667%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_9 {
    width: 75%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_10 {
    width: 83.33333333333334%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .span_11 {
    width: 91.66666666666667%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
  .full {
    width: 100%;
    border-left-width: 2px;
    border-right-width: 2px;
    padding: 10px;
    margin-left: 0;
  }
}
/*
 *	3L was made for YOU to help you create awesome websites
 * and fill the Internet with excessive amount of Love! ♥
 *
 * Keep up your good work!
 *
 * Yours faithfully,
 * Mateusz ★ Kocz  			-> http://radiatingstar.com
 *
 * 3L:							-> http://mateuszkocz.github.com/3l
 *
 * Watch 3L on Github:		-> https://github.com/mateuszkocz/3l
 *
 * Submit a bug issue:		-> https://github.com/mateuszkocz/3l/issues?state=open
 *
 *
 * Licensed under the Apache License v2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Version: 1.3.3 (2012.08.28)
 *
 */
/*
 * To compile all of the code you need to use a compiler
 * that supports JavaScript code and guarder mixins.
 * WinLess meets those requirements. You can find it on winless.org
 *
 * If you're on a Mac and your compiler meets the requirements,
 * please, let me know via Twitter or GitHub!
 *
 */
/* ACTIVATE SUPPORTING CLASSES */
/* Uncomment ones you want to use or put them in html or body elements in your style sheet. */
/* For the explanation what those classes do, read further. */
/*
 * SEO & HTML Debugging
 *
 * A useful supporting class that will help a bit with your SEO
 * and usability of your website.
 *
 * Creating a website is a serious business, but sometimes you may
 * forget about some important details. This class will help you.
 * It will let you know when you haven't put an alt attribute on image
 * or kept that attribute empty, when you haven't typed a URL in anchor or when
 * anchor link has rel=nofollow attribute. It will also show you an alert
 * message if you don't have a <title> tag and description or left them empty*.
 *
 * If any of the errors described above happens, according element will
 * get a red outline border drawing your attention and asking for some love
 * or you will get a message with the same purpose.
 *
 * *** * The <title> reminder can alert you even if you have a <title> tag.
 * ***	This happens if you have a <link> tag (usually used for style sheets)
 * ***	before <title> in your HTML. Just change the order of <link> and
 * ***	<title> and you're cool.
 *
 * How to:
 * Place the .seo-helper class in html element. That's it!
 *
 * *** Example: html {.seo-helper}
 *
 * That way every element on your page will be affected
 * by this rule. You can also place it in any other container
 * class element in your code (body, div.wrapper, article and so on)
 * if you don't want for some reasons to check for bugs on whole page
 * but in single area.
 *
 * Caution! Do not forget to delete this class before finishing your
 * project, unless you want to keep it in continuous project (like blog)
 * and debug every new content on your site. But then you might consider
 * restyling this class to be a bit more eye-pleasing.
 *
 * This may not work in every browser, but since you are a web 
 * developer/designer you're probably already using a bleeding
 * edge nightly alpha back-door version of browser, so no problem!
 * It's probably the only class you don't need to care about how
 * your visitors will see it!
 *
 * *** Aside - How it works:
 * *** Section only for people who don't know yet what attribute
 * *** selectors and negation pseudo-class are.
 * *** 
 * *** Using negation pseudo-class is like saying "target every element x
 * *** that doesn't have attribute y" or "target every element exept (but 'not') z".
 * *** You can read more about that here ->www.w3.org/TR/selectors/#negation.
 * *** 
 * *** Attribute selectors are rules that target elements that have
 * *** some specified attributes (rel, alt, href etc.) and/or specified
 * *** value of this attributes. Read more on this topic here
 * *** ->www.w3.org/TR/selectors/#selectors.
 *
 * For a further explanation and a demo, refer to:
 * -> http://radiatingstar.com/how-to-improve-seo-with-css
 *
 * Why img:not([alt]), img[alt=""] and img[alt^=" "]?
 * First targets images that don't have an alt attribute, second targets
 * ones that have this attribute but it's left empty (probably left by
 * automatic completion of html editor), third is just in case - it
 * might have been left by html editor or manually "to do it later" (clearly
 * a space at the beginning of an alt can't be anything good).
 *
 * Why a[href=""]?
 * If you write an anchor text and leave href to copyPaste URL later,
 * it will reminding you about that.
 *
 * Why a[rel="nofollow"]?
 * For some reasons links on your site may have this attribute and this
 * may generate a huge SEO problem. Better fix it ASAP. (On the other hand
 * nofollow links might be useful in some situations. See here:
 * -> http://en.wikipedia.org/wiki/Nofollow#Control_internal_PageRank_flow)
 *
 * Why div:empty, span:empty, li:empty, p:empty, td:empty, th:empty?
 * It'll just check if you have some redundancy (empty elements) in you code.
 *
 */
/*
 * Helper classes from HTML5 Boilerplate
 * 
 * Classes below help you create a better user experience for both users
 * of browsers and screen readers. Oh, and there's also a clearfix! 
 * 
 * All the classes comes from HTML5 Boilerplate (-> html5boilerplate.com). Here though,
 * they're changed so that they can be easily used in The LESS Way.
 * They're called "non-semantic" in H5B, but here they become semantic if used well.
 * (Actually they can't be used in any way than good in 3L.)
 * (Actually II they can be semantic in H5B as well, but it's a bit pain to do that.)
 * 
 * Usage:
 * Just put them in your classes, id's or elements.
 * 
 * Example:
 * .YOUR-AWESOME-CLASS-NAME {
 *						// some rules 
 *						.clearfix;
 *						}
 * 
 */
/*
 * Box-sizing
 * 
 * Change the basic box-model to the one you want.
 * 
 * Basic box-model defines the width and height of an object only as a size of
 * object's content area. In order to know exactly how big is the object you need
 * to add its padding and borders. This may result in many unwanted behaviours.
 * That's why you can define how you want the browser to calculate the width/height:
 * with or without padding, with or without borders.
 * 
 * To use this feature just put a value you want:
 * -- content-box ("content" works too) - it's default value from basic model.
 * -- padding-box (also "padding") - width and height declarations will include paddings.
 * -- border-box (and "border") - border and padding included.
 * 
 * Usage:
 * 1. .box-sizing(content-box), .box-sizing(content) and .content-box-sizing* for box-sizing: content-box.
 * 2. .box-sizing(padding-box), .box-sizing(padding) and .padding-box-sizing* for box-sizing: padding-box.
 * 3. .box-sizing(border-box), .box-sizing(padding) and .border.box-sizing* for box-sizing: border-box.
 *
 * * Beware not to use those properties without -sizing suffix thus suffixless classes are for background-clip (see this class below).
 *
 * Resources:
 * -- http://paulirish.com/2012/box-sizing-border-box-ftw/
 * 
 * Browsers support: IE8+ and every other.
 * Notable lack of support: IE7-
 * 
 */
/*
 * Background-clip
 * 
 * Clips the object's background to the desired box according to the box-model.
 * 
 * To use this class simply put into an object a .background-clip(box) class,
 * where box means the desired box (see below). You can also use a shorter class
 * .bg-clip or class that corresponds to the clipping you want to get (.content-clip,
 * .padding-clip, .border-clip).
 * 
 * Arguments that comes into (box) are:
 * -- content-box or content for content clip,
 * -- padding-box or padding for padding clip,
 * -- border-box or border for border clip.
 * *** You can use values either with or without "-box" suffix.
 *
 * Browsers support: IE9+ and every other.
 * Notable lack of support: IE8-
 *
 */
/* 
 * Box-shadow
 * Create a shadow behind or inside the element.
 * 
 * Usage:
 * In .box-shadow() brackets put arguments for every single shadow. Separate
 * each shadows' arguments with comma. You can put up to five shadows
 * by default but feel free to add a class with as many as you want.
 * Just check how it is done.
 *
 * You can use a default box-shadow which will create a shadow with
 * 0px x and 1px y offsets, 3px of blur and in black colour with 25% transparency.
 * Just place a .box-shadow class without any arguments.
 * 
 * Box-shadow property takes following arguments:
 *
 * 1. inset [optional].
 * 2. x-offset [required].
 * 3. y-offset [required].
 * 4. blur [optional]. 
 * 5. spread [optional].
 * 6. color [optional/required].
 *
 * Resources:
 * -- developer.mozilla.org/en/CSS/box-shadow
 *
 * Browsers support: IE9, Fx3.5, Chrome, Opera, Safari, Opera Mobile, Android Browser
 * Notable lack of support: IE8-, Opera Mini
 *
 * Example:
 * Two box-shadows: one is 1px offset, black, second one is green with 30% opacity, inset,
 * with 5px offsets, 3px of blur and 1px spread.
 * .box-shadow(1px 1px black, inset 5px 5px 3px 1px fade(green,30%)) // fade(colour,XX%) is a LESS native function
 *																							// that adds alpha channel to colour. Instead of fade()
 *																							// you can also use rgba or hsla colours declaration.
 *
 */
/* 
 * Border-radius
 * Round the element's corners.
 * 
 * Usage: 
 * Border-radius property takes one to four arguments with px, em and %
 * values and round the element's corners accordingly. You can make
 * ellipticaly roundeded corners putting two sets of values separated with
 * comma using .elliptical-border-radius class. In order to round a single
 * corner use .round-corner class. This class takes two sets of arguments.
 * First one is a declaration of corner you want to round (top-left, top-right,
 * bottom-right, bottom-left), second one (separated from the first with comma),
 * is a set of values in px, em or % that round choosen corner. Second
 * declaration can have one (for circle rounding) or two values (for
 * elliptical rounding).
 *  
 * For further explanation of the border-radius property, refer to the 
 * resources section above.
 * 
 * Resources:
 * -- developer.mozilla.org/en/CSS/border-radius
 *
 * Browsers support: IE9, Fx3.5, Chrome, Opera, Safari, Opera Mobile, Android Browser
 * Notable lack of support: IE8-, Opera Mini
 *
 * Example:
 * 1. Round every corner of the element with 10px radius.
 *		.border-radius(10px)
 * 2. Round top-left and bottom-right corners by 10px, top-right
 *		and bottom-left corners by 20px.
 *		.border-radius(10px 20px)
 * 3	Exemplary use of the .elliptical-border-radius class.
 * 	.elliptical-border-radius(10px 20px 30px, 40px 50px 60px 70px)
 * 4. Round top-right corner by 10px and 20px (elliptical).
 * 	.round-corner(top-right, 10px 20px)
 *		.border-top-right-radius(10px 20px) // Alternate method.
 * 5. Round similar corners.
 * 	.border-top-radius(20px 10px); // top-left + top-right (elliptical)
 *		.border-left-radius(5px);		 // top-left + bottom-left
 *
 */
/* 
 * Opacity
 * Make an object transparent.
 *
 * Opacity takes values between 0.0 (invisible) to 1.0 (default - full
 * visibility) but 3L lets you also use percentages and values from >1 to 100.
 *
 * If you want an element with transparency 1, .5 or 0, use these classes:
 * .not-transparent., .half-transparent, .transparent.
 *
 * Browsers support: full (IE6+)
 * Caution! According to -> caniuse.com/#search=opacity, transparency doesn't
 * work well with PNG images that are itself transparent (use alpha channel) in IE8-.
 *
 * Aside:
 * Do we need the ability to set opacity in numbers from 1 to 100
 * and in percentages? I think we do, because:
 * 1. You need to use integer numbers in filter property for IE,
 * 	so there is a possibility that someone will type this kind
 *		of value, instead of [0,1].
 *	2. LESS has a fade() function that uses percentages to makes
 * 	colours (semi)transparent, so using percentages here will
 *		result in more consistent code (same unit in similar situation).
 *	3. Percentages are more intuitive when it comes to transparency and
 * 	opacity since graphic editors like Photoshop and GIMP use them.
 *
 */
/*
 * Gradient
 * Create a beautiful gradient without images.
 *
 * Pick a type of a gradient you want to have and put colours in
 * brackets. You can put either two or three colours. In the first case
 * the default colour for old browsers will be the same as the first colour provided.
 * In the second case you can set that colour as a third argument.
 *
 * The default class - .gradient - is the same as .vertical-gradient.
 *
 * You can choose from four types of gradients:
 * 1. Vertical - colour will change from top to bottom.
 * 2. Horizontal - change is from left to right.
 * 3. Diagonal - from top-left to bottom-right.
 * 4. Radial - from the centre of an element to its borders.
 *
 * Gradients tend to be tricky. There's no support for this property
 * in older IE, but "filter" comes to the rescue. It can generate
 * only horizontal and vertical gradients, though. Also IE9 has some
 * strange behaviour -> css3wizardry.com/2010/10/29/css-gradients-for-ie9/.
 * To provide the best experience for your visitors you should use
 * gradient generator (refer to resources above) with "IE9 Support" option checked.
 *
 * Resources:
 * -- gradient generator with broad browsers support and some advanced options:
 * 	-> www.colorzilla.com/gradient-editor/
 * -- gradient is a powerful tool - you can generate shapes as a background!
 * 	-> lea.verou.me/css3patterns/
 *
 * Browsers support: almost full
 * Notable lack of support: Opera mini
 * Caution! IE6 - IE8 use filter property that can generate only vertical and
 * horizontal gradients. For the best experience in IE9 use gradient generator
 * mentioned above in the resources.
 *
 */
/*
 * Background-size
 * Scale (or not) your background image.
 * 
 * This property takes following values:
 * -- auto [default] - it does nothing when used alone; when used with a value
 * 	it makes sure that image will keep its aspect ratio while being stretched
 * 	to the required size. (See: examples 3. and 4.)
 * -- contain - scale image to the first border it meets;
 *		it may leave some area uncovered but keeps image's aspect ratio,
 * -- cover - scale image to the second border it meets;
 * 	cover all area but part of an image may not be shown. The image keeps its aspect ratio.
 * -- px, em, % - scale image according to declared value;
 * 	you can declare one value (x-size) or two values for each size.
 *		Using (100%, 100%) stretch the image to cover full area but may not
 *		keep its aspect ratio. When you use percentages keep in mind that XX%
 * 	means XX% of the element size, not XX% of the background image. 
 * 
 * Consider adding background-repeat property to avoid unwanted repetition of background.
 * 
 * Browsers support: IE9+, Fx3.6+, Chrome, Safari, Opera, Opera Mini, Opera Mobile, Android Browser
 * Notable lack of support: IE8-
 *
 * Examples:
 * 1. .background-size(contain);
 * 2. .background-size(cover); 
 * 3. .background-size(70%); 		 // = (70% auto). Image is scaled to take 70% of width
 *									 		 // of the element and it keeps its own aspect ratio.
 * 4. .background-size(auto, 70%) // Image is scaled to take 70% of element's
 * 										 // height and keeps aspect ratio.
 * 5. background-size(70px 7em);  // Size of the background image is now 70px (width) x 7em (height).
 * 6. background-size(70px,7em);  // Same as above. Comma is fine too.
 *
 */
/*
 * Columns layout
 * 
 * Divide a block of text into columns as seen in newspapers.
 * 
 * Basic usage:
 * Use .columns() class providing in brackets arguments for columns.
 * Non of those arguments are required, but unless you provide one, columns
 * layout won't work. Available arguments:
 * -- integer - declare a column-count. Unless declared, their width will 
 * 	equal to division of the block's width minus column-gaps and declared integer.
 * 	Default value is "auto" which means that width of columns will be determined
 * 	by column-width value.
 * -- width - declare every column width in px, em and % (of containing block).
 * 	Default value is "auto" - column width will be equal to division of the 
 *		block's width and declared column-count
 * 
 * Usage of supporting classes:
 * You can declare the gaps between columns by .column-gap() class that takes
 * width type argument. Default value is "normal" and equals to 1em.
 * 
 * Declare a vertical rule between columns using .column-rule(). It's the same
 * type of declaration as in borders, that is width, style and colour. By default
 * there is no rule.
 *
 * Browsers support: IE10+, Fx, Chrome, Safari, Opera, Opera Mobile, Android Browser
 * Notable lack of support: IE9-, Opera Mini
 * 
 * Example:
 * 1. .column(2, 20px) // Two columns with 20px width.
 * 2. .column(5) // Five columns layout.
 * 3. element {
 * 		.column(100px);						// A 100px width columns
 * 		.column-gap(10px);					// with 10px gap between
 * 		.column-rule(1px solid black);	// and 1px thick, solid, black vertical rule.
 *		}
 *
 */
/*
 * Transform
 * 2D and 3D transformation of an object.
 * 
 * You can use classes dedicated to specifics transformation, but if you plan
 * to use multiple transformation on an object, use general classes .transform
 * or .transform3d instead. Otherwise the latter transform will override the former.
 * If you want to use some of the 3D transformations, use .transform3d class. It
 * has a 3D specific property transform-style included. You can put both 3D and 2D
 * transformations in .transform3D.
 *
 * Transforms don't affect an object's place in a document and its environment
 * so there's no risk of crashing a layout.
 * 
 * Transformations characteristics:
 * -- Rotate takes one argument and rotate object clockwise by specified angle (in deg).
 * -- Scale takes one or two arguments (x,y). If y is not specified it is assumed that x = y.
 * 	Arguments in interval (0,1) shrink the object. Arguments >1 makes it bigger.
 * -- Skew takes one or two arguments (x,y). If y is not specified it is assumed that y = 0 (no y-skew).
 * 	Arguments must be in deg.
 * -- Translate takes one or two arguments (w,y). If y is not specified it is assumed y = 0 (no y-translate).
 * 	Arguments are in px or em. Translate moves the object by specified value.
 * 
 * Sometimes you might want to control the point that is the relative base of transformations.
 * For that reason use .transform-origin class. That class takes one or two values.
 * First value defines horizontal position of that point, second refers to vertical position.
 * In case you provide only the first value, the second is set to 50%. Default value is (50% 50%).
 * You can use three types of values:
 * -- pixels that place origin point in position according to the top-left corner of an element
 * 	to its bottom-right corner. Negative values allowed - in that case position goes to the left
 *		and top from the top-left corner,
 * -- percentages that are relative to object's width and height. As in px, the original position
 *		is top-left corner (0% 0%), and goes to bottom-right (100% 100%). Negative values does the
 *		same as in px.
 * -- keywords: left / center / right for x-axis and top / center / bottom for y-axis.
 *
 * For 3D transformations you can set a perspective using .perspective() class and putting
 * value in brackets .
 * 	
 * Browsers support: IE9+, Fx3,5+, Chrome, Safari, Opera, Opera Mobile, Android Browser
 * Notable lack of support: IE8-*, Opera Mini
 * * You can use some of the transformation in older IE through filter property.
 *   To generate that property refer to -> css3please.com.
 *   You can also emulate scale property with zoom property.
 * 
 * Examples:
 * 1. .scale(2,.5) // Stretch an object two times and shrink in height by half.
 * 2. .rotate(180deg) // Rotate an object by 180deg.
 * 3. .transform(.scale(2,.5),rotate(180deg)) // Does the combined transformation from examples above.
 * 4. .transform-origin(20% top) // Place the transformation origin at the top, 20% of the object's
 * 										// width to the right from the top-left corner. 
 */
/*
 * Transition
 * Animate a change between different object states.
 * 
 * You can use this class to animate change of up to 5 different properties.
 * If you need more that that (wow!) it's easy to add more of these classes.
 * 
 * Transition takes 4 values:
 * -- transition-property - choose a property you want to animate (margin, colour etc.).
 * 	Default value is "all" which will animate every change that might happen. It's a good
 * 	idea to explicitly write this value if you want to animate everything, though. We can't
 * 	be sure if in the future default state won't change to "none", which will break the whole transition.
 * -- transition-duration - specifies how long transition animation will have to take
 *		until animation is finished. Put values in s (seconds) or ms (milliseconds).
 * 	Required value, since default state is 0s (no animation occurs).
 * -- transition-timing-function - this value describe an acceleration function. It can
 *		really affect overall experience, so it's good idea to pay attention to that.
 * 	Timing function takes 4 number values of keywords: linear, ease, ease-in,
 * 	ease-in-out, ease-out. For further explanation refer to ->developer.mozilla.org/en/CSS/timing-function
 * 	Default value is "ease".
 * -- transition-delay - in seconds or millisecond describes how long transition will wait
 * 	until it occurs after a triggering requirement was met. Default value is 0 - instant animation.
 * 
 * In case you want to put a transformation property into transition effect, use
 * the .transition-transform class. This class is prepared to automatically add
 * many browsers prefixes required in that case. It is also a bit future friendly,
 * but all at all using transitions on transform is very risky.
 * -> http://radiatingstar.com/transition-with-transform-cant-be-future-proof
 * 
 * Usage:
 * For .transition class, put in brackets at least a time value. If you want to animate more than one
 * property or animate everything with different functions, put up to 5 declarations separated with
 * commas. If one of the property you want to animate is "transform" _and_ you want to animate every
 * other properties (or at least not with the same functions), use .transition-transform. As a first
 * value put a time duration for transform property. Do not write this property though. It's auto-added
 * for the first set of values. Add other properties after commas. Refer to the example 3.
 * 
 * Browsers support: IE10+, Fx4+, Chrome, Opera, Safari, Opera Mobile, Android Browser
 * Notable lack of support: IE9-, Fx3.6-, Opera Mini
 * *** Transition provides only a visual effects between states. It's perfectly
 * *** safe to use. Users with older browser just won't see a phase of changing.
 * 
 * Examples:
 * 1. .transition (all 1s); // Animate all properties for 1 second.
 * 2. .transition (background-color 5s, margin 1s linear 5s) // Animate change of background-color for 5s
 * 																			 // and after 5s animate margin change for 1s.
 * 3. .transition-transform (2s linear, padding 3s) // Animate change of transform property (no "transform" declared!)
 * 																 // and padding property.
 */
/*
 * Animations
 * 
 * Create an awesome animation!
 * 
 * This class takes from two to five properties:
 * -- animation-name [required] - declare your @keyframes animation name. See below
 * 	for an easy way to make @keyframes!
 * -- animation-duration [required] - declare how long will it take for an animation
 * 	to reach end. Value in seconds (s) or milliseconds (ms).
 * -- timing-function - it's the same property as in transition. Refer to
 * 	that topic for further explanation.
 * -- iteration-count - how many times an animation will repeat. It takes integer
 * 	or "infinite" keyword (for infinite repetition). Default value is 1.
 * -- direction - indicates whether the animation should play in reverse on
 * 	alternate cycles. Refer to ->developer.mozilla.org/en/CSS/animation-direction
 * 	for better explanation. To declare a direction use normal [default value],
 * 	alternate, reverse or alternate-reverse keyword.
 * 
 * Resources:
 * -- developer.mozilla.org/en/CSS/animation
 *
 * Creating @keyframes:
 * Write in your .less file:
 * *** @import 'animationX.less';
 * where X stands for a number between 1 and 5. Then create a class
 * *** .animationX () {}
 * and in {} write declarations you normally write in @keyframes.
 * Then just put an .animation(animationX [other animation properties]) class in your element.
 * That's all!
 *
 * Example:
 * .toBeAnimated {
 * 		// Animation with every possible value declared. //
 *			.animation(animation1 5s linear 3s infinite alternate);
 *			}
 * // Importing prefixed @keyframes for animation1.
 * @import 'animation1';
 *
 * // Declaring @keyframes for animation. Only once! 
 * .animation1() {
 *			from (margin-top: 3px;)
 *			to (margin-top: 333px;)
 *			}
 *
 */
/* - Styles ---------------------------------------------> */
html {
  font-size: 62.5%;
}
body {
  font-family: 'Open Sans', sans-serif;
  font-weight: 400;
}
.container {
  position: relative;
  margin: 0 auto;
  width: 980px;
}
@media only screen and (max-width: 979px) {
  .container {
    width: 100%;
  }
}
/* -- Classes -------------------------------------------> */
.hidden {
  display: none;
  visibility: hidden;
}
.invisible {
  visibility: hidden;
}
.clearfix:before,
.clearfix:after {
  content: "\0020";
  display: block;
  height: 0;
  overflow: hidden;
}
.clearfix:after {
  clear: both;
}
.clearfix {
  zoom: 1;
}
/* -- Medias --------------------------------------------> */
@media print {
  * {
    background: transparent !important;
    color: black !important;
    text-shadow: none !important;
    filter: none !important;
    -ms-filter: none !important;
  }
  a,
  a:visited {
    color: #444 !important;
    text-decoration: underline;
  }
  a[href]:after {
    content: " (" attr(href) ")";
  }
  abbr[title]:after {
    content: " (" attr(title) ")";
  }
  .ir a:after,
  a[href^="javascript:"]:after,
  a[href^="#"]:after {
    content: "";
  }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }
  thead {
    display: table-header-group;
  }
  tr,
  img {
    page-break-inside: avoid;
  }
  @page {
    margin: 0.5cm;
  }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }
  h2,
  h3 {
    page-break-after: avoid;
  }
}
